'''
プログラミングパラダイム
　プログラミングのスタイル・手法のこと
　手法によって、プログラムが動いているときの変数の値（ステート）が異なる

・手続き型プログラミング
　状態をすべてグローバル変数に持たせる
　コードがグローバル変数の状態を変えるという副作用の上で成り立っている手法
　グローバル変数の多用を避けることは、関数の独立性を高め、
　理解しやすくバグの少ないコードを書くために重要

・関数型プログラミング
　グローバルステートに依存せず、関数に渡された引数によってのみ動作が変わる
　現在の関数外のデータに依存しない、現在の関数外に存在するデータは変更されない
　グローバルステートが存在しない＝副作用がない

・オブジェクト指向プログラミング
　オブジェクトにステートを持たせる
　コードの再利用が促進され、開発や保守にかかるトータルコストが削減される
　設計に多くの労力をかける必要がある
クラス
　同様のオブジェクトを分類してグループ化するための、プログラミングの仕組み
インスタンス
　すべてのオブジェクトは、クラスのインスタンス
　クラスで定義した、クラスを形作る属性全てを持つ

'''
#関数型プログラミング
def increment(a):
    return a + 1


#オブジェクト指向プログラミング
class Orange:
    def __init__(self, w, c):
        self.weight = w
        self.color = c
        self.mold = 0
        print("Created!!")

    def rot(self, days, temp):
        self.mold = days * temp

orl = Orange(100, "red")
orl2 = Orange(300, "green")
orl3 = Orange(500, "blue")

print(orl) #コンピュータのメモリー上の位置

orl.weight = 200
orl.color = "yellow"
orl.rot(3, 40)

print(orl.weight)
print(orl.color)
print(orl.mold)

#クラス名はキャメルケース
#要素語の最初を大文字で書き表すこと

#メソッド
#クラスの内部で定義し、そのクラスから生成したオブジェクトを通してのみ呼び出す
#全て小文字

#関数との違い
#①クラスのスイート部分に定義する
#②引数を少なくとも1つ定義する必要がある

#self変数
#オブジェクトに属する変数（インスタンス変数）の定義に使う
#明示的にself引数を渡す必要はない

#特殊メソッド　__init__
#二重のアンダースコアで囲まれたメソッド
